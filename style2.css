@font-face{
  font-family: 'Fun';
  src: url('fonty.woff') format('woff');
}

html {
  font-family: 'Fun';
}

/* FLEX FRAMEWORK ////////////////////////////////////////////////////////////*/
.flextainer {
  display: -webkit-box;
  display: -moz-box;
  display: -ms-flexbox;
  display: -webkit-flex;
  display: flex;
}

/* This is the shorthand for flex-grow, flex-shrink and flex-basis combined.
The second and third parameters (flex-shrink and flex-basis) are optional. Default is 0 1 auto. */
.flex0 {
  flex: 0;
  -webkit-flex: 0;
}
.flex1 {
  flex: 1;
  -webkit-flex: 1;
}
.flex2 {
  flex: 2;
  -webkit-flex: 2;
}
.flex3 {
  flex: 3;
  -webkit-flex: 3;
}
.flex4 {
  flex: 4;
  -webkit-flex: 4;
}

/* This establishes the main-axis, thus defining the direction flex items are placed in the flex container.
Flexbox is (aside from optional wrapping) a single-direction layout concept.
Think of flex items as primarily laying out either in horizontal rows or vertical columns. */
.flexrow { /* default */
  -webkit-box-orient: horizontal;
  -moz-box-orient: horizontal;
  -webkit-box-direction: normal;
  -moz-box-direction: normal;
  -webkit-flex-direction: row;
  -ms-flex-direction: row;
  flex-direction: row;
}
.flexrowreverse {
  -webkit-box-orient: horizontal;
  -moz-box-orient: horizontal;
  -webkit-box-direction: reverse;
  -moz-box-direction: reverse;
  -webkit-flex-direction: row-reverse;
  -ms-flex-direction: row-reverse;
  flex-direction: row-reverse;
}
.flexcol {
  -webkit-box-orient: vertical;
  -moz-box-orient: vertical;
  -webkit-box-direction: normal;
  -moz-box-direction: normal;
  -webkit-flex-direction: column;
  -ms-flex-direction: column;
  flex-direction: column;
}
.flexcolreverse {
  -webkit-box-orient: vertical;
  -moz-box-orient: vertical;
  -webkit-box-direction: reverse;
  -moz-box-direction: reverse;
  -webkit-flex-direction: column-reverse;
  -ms-flex-direction: column-reverse;
  flex-direction: column-reverse;
}

/* This defines the alignment along the main axis.
It helps distribute extra free space left over when either all the flex items on a line are inflexible,
or are flexible but have reached their maximum size.
It also exerts some control over the alignment of items when they overflow the line. */
.flexstart {
  justify-content: flex-start;
  -webkit-justify-content: flex-start;
}
.flexcenter {
  justify-content: center;
  -webkit-justify-content: center;
}
.flexend {
  justify-content: flex-end;
  -webkit-justify-content: flex-end;
}
.flexbetween {
  justify-content: space-between;
  -webkit-justify-content: space-between;
}
.flexaround {
  justify-content: space-around;
  -webkit-justify-content: space-around;
}

/* By default, flex items will all try to fit onto one line.
You can change that and allow the items to wrap as needed with this property.
Direction also plays a role here, determining the direction new lines are stacked in. */
.flexwrap {
  flex-wrap: wrap;
  -webkit-flex-wrap: wrap;
}
.flexwrapreverse {
  flex-wrap: wrap-reverse;
  -webkit-flex-wrap: wrap-reverse;
}
.flexnowrap {
  flex-wrap: nowrap;
  -webkit-flex-wrap: nowrap;
}

/* Alignment in other dimension (perpendicular to flex-direction). */
/* Vertical align for Rows.  Horizontal align for Cols. */
.flexitemsstart {
  align-items: flex-start;
  -webkit-align-items: flex-start;
}
.flexitemscenter {
  align-items: center;
  -webkit-align-items: center;
}
.flexitemsend {
  align-items: flex-end;
  -webkit-align-items: flex-end;
}
.flexitemsstretch {
  align-items: stretch;
  -webkit-align-items: stretch;
}
.flexitemsbaseline {
  align-items: baseline;
  -webkit-align-items: baseline;
}

/* This defines the default behaviour for how flex items are laid out along the cross axis on the current line.
Think of it as the justify-content version for the cross-axis (perpendicular to the main-axis). */
.flexselfstart {
  align-self: flex-start;
  -webkit-align-self: flex-start;
}
.flexselfcenter {
  align-self: center;
  -webkit-align-self: center;
}
.flexselfend {
  align-self: flex-end;
  -webkit-align-self: flex-end;
}
.flexselfbaseline {
  align-self: baseline;
  -webkit-align-self: baseline;
}
.flexselfstretch {
  align-self: stretch;
  -webkit-align-self: stretch;
}

/* NOTE: align-content not included. */